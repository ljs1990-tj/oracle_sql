-- 트리거
-- 특정 테이블(선택한 테이블)에 변화가 생겼을 때(INSERT, DELETE, UPDATE)
-- 실행되는 프로시저

CREATE OR REPLACE TRIGGER TRIGGER_SAMPLE1
    BEFORE -- 트리거 실행 시점(BEFORE OR AFTER)
    UPDATE OR INSERT ON EMP -- EMP테이블이 UPDATE 혹은 INSERT가 발생했을 때 실행하겠다
    FOR EACH ROW -- 옵션, 각 행별로 트리거를 실행할 것인가. 
                 -- (ex, UPDATE가 3개의 행에 영향을 준다면, 트리거도 3번 실행하겠다)
BEGIN
    DBMS_OUTPUT.PUT_LINE('변경 전 : ' || :OLD.SAL);
    DBMS_OUTPUT.PUT_LINE('변경 후 : ' || :NEW.SAL);
END;
/

UPDATE EMP
SET
    SAL = SAL+100
WHERE EMPNO = '7499';

DROP TABLE EMP_LOG;
CREATE TABLE EMP_LOG(
    L_EMPNO NUMBER,
    L_MGR NUMBER,
    O_SAL NUMBER,
    N_SAL NUMBER,
    L_COMM NUMBER,
    L_ID VARCHAR2(30),
    EVENT VARCHAR2(20),
    L_TIME DATE
);

CREATE OR REPLACE TRIGGER EMP_TRIGGER
    AFTER
    INSERT OR UPDATE OR DELETE ON EMP
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO EMP_LOG
        VALUES(:NEW.EMPNO, :NEW.MGR, :NEW.SAL, :NEW.SAL, :NEW.COMM, SYS_CONTEXT('USERENV','SESSION_USER'), 'I', SYSDATE);
    ELSIF UPDATING THEN
        INSERT INTO EMP_LOG
        VALUES(:NEW.EMPNO, :NEW.MGR, :OLD.SAL, :NEW.SAL, :NEW.COMM, SYS_CONTEXT('USERENV','SESSION_USER'), 'U', SYSDATE);
    ELSIF DELETING THEN
        RAISE_APPLICATION_ERROR(-20000, '삭제할 수 없습니다.');   
--        INSERT INTO EMP_LOG
--        VALUES(:OLD.EMPNO, :OLD.MGR, :OLD.SAL, :OLD.SAL, :OLD.COMM, SYS_CONTEXT('USERENV','SESSION_USER'), 'D', SYSDATE);
    END IF;
END;
/

SELECT * FROM EMP;

INSERT INTO EMP VALUES(1234, 'TEST', 'CLERK', 7698, SYSDATE, 2000, 500, 20);
UPDATE EMP
SET
    SAL = SAL + 200
WHERE EMPNO = 7521;
DELETE FROM EMP WHERE EMPNO = '7521';
COMMIT;
SELECT * FROM EMP_LOG;


DROP TABLE PROFESSOR_LOG;
CREATE TABLE PROFESSOR_LOG(
    PROFNO NUMBER,
    NAME VARCHAR(20),
    PAY NUMBER,
    ID VARCHAR(20),
    CDATETIME DATE,
    EVENT VARCHAR2(10)
);


CREATE OR REPLACE TRIGGER PROFESSOR_TRIGGER
    AFTER
    INSERT OR UPDATE OR DELETE ON PROFESSOR
    FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO PROFESSOR_LOG
        VALUES(:NEW.PROFNO, :NEW.NAME, :NEW.PAY, SYS_CONTEXT('USERENV','SESSION_USER'), SYSDATE, 'I');
    ELSIF UPDATING THEN
        INSERT INTO PROFESSOR_LOG
        VALUES(:NEW.PROFNO, :NEW.NAME, :NEW.PAY, SYS_CONTEXT('USERENV','SESSION_USER'), SYSDATE, 'I');
    ELSIF DELETING THEN
        RAISE_APPLICATION_ERROR(-20000, '삭제할 수 없습니다.');   
    END IF;
END;
/

UPDATE PROFESSOR
SET
    PAY = PAY + 100
WHERE PROFNO = 1001;
COMMIT;
SELECT * FROM PROFESSOR_LOG;